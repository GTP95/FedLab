### USER CONFIGURATION PARAMETERS ###

# pick a nickname that will be shown as your party name on the FedLab directory.
PARTY_NICKNAME="<nickname>"

# in the next line, substitute <YOUR_LAB_SUBNET_ADAPTER> with the name of the adapter you want to use to connect the Gateway to WAN (probably your pre-existing LAN)
LAB_SUBNET_ADAPTER="<YOUR_LAB_SUBNET_ADAPTER>"

# in the next line, substitute <YOUR-IP-RANGE> with the IP address of your LAN in CIDR notation
IP_RANGE="<YOUR-IP-RANGE>"

# In the next line, change <RESERVED_IP> to the IP you want the gateway to use.
# WARNING: make sure the IP you choose does not interfere with any existing networks,
# i.e. please use a subnet that is not in use.
VM_IP="<RESERVED_IP>"


### PLEASE DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS EXPLICITLY INSTRUCTED TO DO SO FROM THE FEDERATED LAB ADMINISTRATOR ###


### ADMIN CONFIGURATION PARAMETERS ###

# Set here the party name's slug as indicated inside NetBox. This will be used to fetch the assigned IP address block.
PARTY_SLUG_FROM_NETBOX=""

# in next line, substitute "certificate.ovpn" with the name of the generated OpenVPN certificate
CERT="certificate.ovpn"


### THERE SHOULD BE NO NEED TO CHANGE ANYTHING FROM NOW ON ###

### AUTOMATIC CONFIGURATION ###

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.network "public_network", ip: VM_IP, bridge: LAB_SUBNET_ADAPTER

  ###### COPY FILES ######
  config.vm.provision "file", source: CERT, destination: "~/#{CERT}"

  # firewall scripts
  config.vm.provision "file", source: "../system/firewall/arptables.sh", destination: "~/init.sh"
  config.vm.provision "file", source: "../system/firewall/iptables.sh", destination: "~/iptables.sh"

  # configuration files and scripts needed for setup and management of the DHCP server
  config.vm.provision "file", source: "../system/DHCP/isc-dhcp-server", destination: "~/isc-dhcp-server"
  config.vm.provision "file", source: "../system/DHCP/dhcpd.conf", destination: "~/dhcpd.conf"
  config.vm.provision "file", source: "../system/DHCP/get_random_ip.py", destination: "~/get_random_ip.py"
  config.vm.provision "file", source: "../system/DHCP/configure_dhcp.py", destination: "~/configure_dhcp.py"

  # scripts for managements of devices and capabilities
  config.vm.provision "file", source: "../system/firewall/manage_acl.sh", destination: "~/manage_acl.sh"
  config.vm.provision "file", source: "../system/firewall/manage_capabilities.py", destination: "~/manage_capabilities.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/query-directory.py", destination: "~/query-directory.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/add-device.py", destination: "~/add-device.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/expose-device.py", destination: "~/expose-device.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/expose-capability.py", destination: "~/expose-capability.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/remove-device.py", destination: "~/remove-device.py"
  config.vm.provision "file", source: "../manage-devices-capabilities/remove-capability.py", destination: "~/remove-capability.py"

  # scripts for sending and retrieving user manuals
  config.vm.provision "file", source: "../user-manual-ftp-client/put_manual.sh", destination: "~/put_manual.sh"
  config.vm.provision "file", source: "../user-manual-ftp-client/get_manual.sh", destination: "~/get_manual.sh"

  # files related to the sniffing capability
  config.vm.provision "file", source: "../sniff-capability/target/sniff-capability-1.0-SNAPSHOT-jar-with-dependencies.jar", destination: "~/sniff-capability.jar"

  # miscellaneous system files
  config.vm.provision "file", source: "../system/acl_persistence.py", destination: "~/acl_persistence.py"
  config.vm.provision "file", source: "../system/arp_table_observer.py", destination: "~/arp_table_observer.py"
  config.vm.provision "file", source: "../system/get_subnet_from_netbox.py", destination: "~/get_subnet_from_netbox.py"

  # TODO remove?
  config.vm.provision "file", source: "../list-capabilities.py", destination: "~/list-capabilities.py"
  ###### /COPY FILES ######

  # give execution rights to manually-invoked scripts
  config.vm.provision "shell", inline: "chmod +x manage_acl.sh"
  config.vm.provision "shell", inline: "chmod +x put_manual.sh"
  config.vm.provision "shell", inline: "chmod +x get_manual.sh"
  config.vm.provision "shell", inline: "chmod +x get_random_ip.py"
  config.vm.provision "shell", inline: "chmod +x configure_dhcp.py"
  config.vm.provision "shell", inline: "chmod +x expose-capability.py"
  config.vm.provision "shell", inline: "chmod +x add-device.py"
  config.vm.provision "shell", inline: "chmod +x expose-device.py"
  config.vm.provision "shell", inline: "chmod +x query-directory.py"
  config.vm.provision "shell", inline: "chmod +x remove-capability.py"
  config.vm.provision "shell", inline: "chmod +x list-capabilities.py"
  config.vm.provision "shell", inline: "chmod +x get_subnet_from_netbox.py"

  # update VM, install OpenVPN, dos2unix, python3.9, vsftpd, isc-dhcp-server and scripts' dependencies
  config.vm.provision "shell", inline: "sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y autoremove"
  config.vm.provision "shell", inline: "sudo apt-get -y install openvpn dos2unix python3-pip vsftpd isc-dhcp-server openjdk-11-jre"
  config.vm.provision "shell", inline: "sudo apt-get -y install python3.9"
  config.vm.provision "shell", inline: "python3.9 -m pip install watchdog"
  config.vm.provision "shell", inline: "python3.9 -m pip install requests"

  # fix CRLF in case host is running Windows
  config.vm.provision "shell", inline: "dos2unix iptables.sh"
  config.vm.provision "shell", inline: "dos2unix manage_acl.sh"
  config.vm.provision "shell", inline: "dos2unix arp_table_observer.py"
  config.vm.provision "shell", inline: "dos2unix init.sh"
  config.vm.provision "shell", inline: "dos2unix #{CERT}"
  config.vm.provision "shell", inline: "dos2unix dhcpd.conf"
  config.vm.provision "shell", inline: "dos2unix isc-dhcp-server"
  config.vm.provision "shell", inline: "dos2unix acl_persistence.py"
  config.vm.provision "shell", inline: "dos2unix get_random_ip.py"
  config.vm.provision "shell", inline: "dos2unix configure_dhcp.py"
  config.vm.provision "shell", inline: "dos2unix manage_capabilities.py"
  config.vm.provision "shell", inline: "dos2unix expose-capability.py"
  config.vm.provision "shell", inline: "dos2unix add-device.py"
  config.vm.provision "shell", inline: "dos2unix expose-device.py"
  config.vm.provision "shell", inline: "dos2unix query-directory.py"
  config.vm.provision "shell", inline: "dos2unix remove-capability.py"
  config.vm.provision "shell", inline: "dos2unix list-capabilities.py"
  config.vm.provision "shell", inline: "dos2unix get_subnet_from_netbox.py"

  # set up configuration files, configure iptables, start DHCP service, configure vsftpd
  config.vm.provision "shell", inline: "sed -i '15s/192.168.5.1/#{VM_IP}/' dhcpd.conf"
  config.vm.provision "shell", inline: "sudo bash iptables.sh #{IP_RANGE}", run: 'always'
  config.vm.provision "shell", inline: "echo starting OpenVPN", run: 'always'
  config.vm.provision "shell", inline: "sudo openvpn --config #{CERT} &", run: 'always'
  config.vm.provision "shell", inline: "echo getting IP address block from NetBox and using it to configure the DHCP server", run:'always'
  config.vm.provision "shell", inline: "python3.9 get_subnet_from_netbox.py #{PARTY_SLUG_FROM_NETBOX}"
  config.vm.provision "shell", inline: "sudo mv dhcpd.conf /etc/dhcp/dhcpd.conf"
  config.vm.provision "shell", inline: "sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd_base.conf"
  config.vm.provision "shell", inline: "sudo mv isc-dhcp-server /etc/default/isc-dhcp-server"
  config.vm.provision "shell", inline: "sudo systemctl enable isc-dhcp-server"
  config.vm.provision "shell", inline: "sudo systemctl start isc-dhcp-server"
  config.vm.provision "shell", inline: "sudo sed -i '25s/NO/YES/' /etc/vsftpd.conf"
  config.vm.provision "shell", inline: "echo 'anon_root=/home/vagrant/captures' >> /etc/vsftpd.conf"
  config.vm.provision "shell", inline: "mkdir writablecaptures"
  config.vm.provision "shell", inline: "ln -s writablecaptures captures"
  config.vm.provision "shell", inline: "sudo chown ftp captures"
  config.vm.provision "shell", inline: "sudo chmod a-w captures"
  config.vm.provision "shell", inline: "sudo systemctl restart vsftpd"
  config.vm.provision "shell", inline: "sudo systemctl enable vsftpd"

  # set party nickname
  config.vm.provision "shell", inline: "echo #{PARTY_NICKNAME} > partynickname.txt"

  # enable traffic forwarding
  config.vm.provision "shell", inline: "echo enabling traffic forwarding"
  config.vm.provision "shell", inline: "echo 1 > /proc/sys/net/ipv4/ip_forward", run: 'always'

  # make sure the garbage collector for the ARP table will run with even a low number of connected devices
  config.vm.provision "shell", inline: "echo 0 > /proc/sys/net/ipv4/neigh/default/gc_thresh1", run: 'always'

  # make sure devices are not removed from the ARP table too soon
  config.vm.provision "shell", inline: "echo 600 > /proc/sys/net/ipv4/neigh/default/base_reachable_time", run: 'always'

  # read out the ARP table to a temporary file, since /proc/net/arp is dynamically generated when called, hence cannot be observed
  config.vm.provision "shell", inline: "echo \"* * * * * cat /proc/net/arp > /tmp/arp_table\" | crontab -", run: 'always'

  # set up crontab
  config.vm.provision "shell", inline: "/etc/init.d/cron restart", run: 'always'

  # start init.sh, OpenVPN, arp_table_observer.py and sniff-capability
  config.vm.provision "shell", inline: "echo running init.sh script", run: 'always'
  config.vm.provision "shell", inline: "sudo bash init.sh", run: 'always'
  config.vm.provision "shell", inline: "echo restoring ACL rules", run: 'always'
  config.vm.provision "shell", inline: "python3.9 acl_persistence.py", run: 'always'
  config.vm.provision "shell", inline: "echo starting arp_table_observer.py", run: 'always'
  config.vm.provision "shell", inline: "python3.9 arp_table_observer.py &", run: 'always'
  config.vm.provision "shell", inline: "java -jar sniff-capability.jar enp0s8 1024 &"
  config.vm.provision "shell", inline: "./expose-capability.py -i #{VM_IP} -p 1024 -n 'packet sniffer' -d 'Sniff packets on this gateway using tcpdump. Connect with netcat or telnet and follow the instructions'"
  config.vm.provision "shell", inline: "./expose-capability.py -i #{VM_IP} -p 21 -n 'Download packet captures' -d 'Download packet captures via FTP. Anonymous login is enabled, connect with either user \'ftp\' or \'anonymous\' and use a blank password'"
end
