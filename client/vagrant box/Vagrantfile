### CONFIGUARTION PARAMETERS ###

#In the next line, change 192.168.1.201 to the IP you reserved for the gateway
VM_IP="192.168.1.201"

#In next line, substitute "certificate.ovpn" with the name of your OpenVPN certificate
CERT="certificate.ovpn"

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.network "public_network", ip: VM_IP
  
  #Copy all the needed scripts inside the VM
  config.vm.provision "file", source: "iptables.sh", destination: "~/iptables.sh"
  config.vm.provision "file", source: "../manage_acl.sh", destination: "~/manage_acl.sh"
  config.vm.provision "file", source: "../arp_table_observer.py", destination: "~/arp_table_observer.py"
  config.vm.provision "file", source: "../init.sh", destination: "~/init.sh"
  config.vm.provision "file", source: CERT, destination: "~/#{CERT}"
  
  #Update VM, install OpenVPN, dos2unix, python3.9 and scripts' dependencies
  config.vm.provision "shell", inline: "sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y autoremove"
  config.vm.provision "shell", inline: "sudo apt-get -y install openvpn dos2unix python3-pip"
  config.vm.provision "shell", inline: "sudo add-apt-repository ppa:deadsnakes/ppa"
  config.vm.provision "shell", inline: "sudo apt-get -y install python3.9"
  config.vm.provision "shell", inline: "python3.9 -m pip install watchdog"
  config.vm.provision "shell", inline: "python3.9 -m pip install paho-mqtt"
  config.vm.provision "shell", inline: "wget https://github.com/hivemq/mqtt-cli/releases/download/v4.6.2/mqtt-cli-4.6.2.deb"
  config.vm.provision "shell", inline: "sudo apt-get -y install ./mqtt-cli-4.6.2.deb"
  config.vm.provision "shell", inline: "rm mqtt-cli-4.6.2.deb"
  
  #Fix CRLF in case host is running Windows
  config.vm.provision "shell", inline: "dos2unix iptables.sh"
  config.vm.provision "shell", inline: "dos2unix manage_acl.sh"
  config.vm.provision "shell", inline: "dos2unix arp_table_observer.py"
  config.vm.provision "shell", inline: "dos2unix init.sh"
  config.vm.provision "shell", inline: "dos2unix #{CERT}"
 
  #enable traffic forwarding
  config.vm.provision "shell", inline: "echo enabling traffic forwarding"
  config.vm.provision "shell", inline: "echo 1 > /proc/sys/net/ipv4/ip_forward", run: 'always'
  
  #make sure the garbage collector for the ARP table will run with even a low number of connected devices
  config.vm.provision "shell", inline: "echo 0 > /proc/sys/net/ipv4/neigh/default/gc_thresh1", run: 'always'
  
  #make sure devices are not removed from the ARP table too soon
  config.vm.provision "shell", inline: "echo 600 > /proc/sys/net/ipv4/neigh/default/base_reachable_time", run: 'always'
  
  #read out the ARP table to a temporary file, since /proc/net/arp is dynamically generated when called, hence cannot be observed
  config.vm.provision "shell", inline: "echo \"*/2 * * * * cat /proc/net/arp > /tmp/arp_table\" | crontab -", run: 'always'  
  
  #set up crontab
  config.vm.provision "shell", inline: "/etc/init.d/cron restart", run: 'always'
   
  #Configure iptables
  config.vm.provision "shell", inline: "echo configuring iptables"
  config.vm.provision "shell", inline: "sudo bash iptables.sh", run: 'always'
  
  #Start OpenVPN, init.sh and arp_table_observer.py
  config.vm.provision "shell", inline: "echo running init.sh script", run: 'always'
  config.vm.provision "shell", inline: "sudo bash init.sh", run: 'always'
  config.vm.provision "shell", inline: "echo starting OpenVPN", run: 'always'
  config.vm.provision "shell", inline: "sudo openvpn --config #{CERT} &", run: 'always'
  config.vm.provision "shell", inline: "echo starting arp_table_observer.py", run: 'always'
  config.vm.provision "shell", inline: "python3.9 arp_table_observer.py &", run: 'always'
end
